plugins {
	id 'org.springframework.boot' version '2.2.6.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.seil'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'io.springfox:springfox-swagger2:2.6.1'
	implementation 'io.springfox:springfox-swagger-ui:2.6.1'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-test'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	compileOnly 'org.projectlombok:lombok'
	compile 'mysql:mysql-connector-java'
	compile 'com.google.api-client:google-api-client:1.31.2'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport' // test를 수행하면 끝나고 다음으로 실행
}

jacoco {
	// JaCoCo 버전
	toolVersion = '0.8.5'

	//  테스트결과 리포트를 저장할 경로 변경
	//  default는 "$/jacoco"
	//  reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {

	reports {
		// 원하는 리포트를 켜고 끌 수 있습니다.
		html.enabled = true
		xml.enabled = false
		csv.enabled = false
		//  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
		//  html.destination file("$buildDir/jacocoHtml")
		//  xml.destination file("$buildDir/jacoco.xml")
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, // 리포트 결과에 제외시킬 디렉토리
					exclude: [// 커버리지 계산 제외할 class
							  '**/dto/*',
							  '**/entity/*',
							  '**/repository/*',
							  '**/vo/*',
							  '**/web/rest/advice/*',
                              '**/web/rest/config/*',
                              '**/web/rest/exception/*',
                              '**/web/rest/security/*',
							  '**/DefaultGoogleVerifyService'
					])
		}))
	}

	finalizedBy 'jacocoTestCoverageVerification' // jacocoTestReport를 수행하면 끝나고 다음으로 실행

}

jacocoTestCoverageVerification {

	// 빌드 성공하기 위한 조건을 정의한다.
	violationRules {

		rule {

			enabled = true
			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.50
			}

			excludes = [
					// 커버리지 계산 제외할 class
					'*.dto.*',
					'*.entity.*',
					'*.repository.*',
					'*.vo.*',
					'*.advice.*',
					'*.web.rest.config.*',
					'**/web/rest/exception/*',
					'*.web.rest.security.*',
					'*.DefaultGoogleVerifyService',
			]

		}

	}

}